@page
@using RoboRecords.Models
@using Google.Protobuf.WellKnownTypes
@model RoboRecords.Pages.EditGame
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery _antiforgery

<!--
 EditGame.cshtml: Frontend for the game edition page
 Copyright (C) 2022, Ors <Riku-S> and Refrag <Refragg>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 See the 'LICENSE' file for more details.
-->

@{
    ViewData["Title"] = "Edit game";
    
    var requestToken = _antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
}

<input id="__AntiforgeryToken" type="hidden" value="@requestToken" />

@section Scripts {
    <script>
    class LevelForm
    {
        constructor(name, Act, number, Nights, IconUrl) 
        {
            this.LevelName = name;
            this.Act = Act;
            this.LevelNumber = number;
            this.Nights = Nights.toString() === "True";
            this.IconUrl = IconUrl;
        }
    }
    
    class LevelGroupForm
    {
        constructor(name, writeLevelNames, Levels)
        {
            this.Name = name;
            this.WriteLevelNames = writeLevelNames.toString() === "True";
            this.Levels = Levels.slice();
        }
    }

    class EditGameForm
    {
        GroupName = "";
        UrlName = "";
        IconUrl = "";
        LevelGroups = [];
        
        init()
        {
            console.log("Creating a form object");
            this.name = "@EditGame.Game.Name";
            this.UrlName = "@EditGame.Game.UrlName";
            this.IconPath = "@EditGame.Game.IconPath";
            this.LevelGroups = [];
            let tempLevels = [];
            
            @for (var groupCount = 0; groupCount < EditGame.Game.LevelGroups.Count; groupCount++)
            {
                var group = EditGame.Game.LevelGroups[groupCount];
                <text>
                tempLevels = [];
                </text>
                @for (var levelCount = 0; levelCount < EditGame.Game.LevelGroups[groupCount].Levels.Count; levelCount++)
                {
                    var level = group.Levels[levelCount];
                    <text>
                    tempLevels.push(new LevelForm("@level.LevelName", @level.Act, @level.LevelNumber, "@level.Nights", "@level.IconUrl"));
                    </text>
                }
                <text>
                this.LevelGroups.push(new LevelGroupForm("@group.Name", "@group.WriteLevelNames", tempLevels))
                </text>
            }
            console.log("Created a form object");
        }
        
        draw()
        {
            let formDiv = document.getElementById("group_div");
            let html_str = "";
            for (let groupCount = 0; groupCount < this.LevelGroups.length; groupCount++)
            {
                let group = this.LevelGroups[groupCount];
                let checked_str = group.WriteLevelNames ? "checked" : "";
                
                html_str += `
                <div style="background: #204080; padding: 10px; margin-bottom: 10px">
                    <dt>
                        <label for="group_` + groupCount +`_name">Name</label>
                    </dt>
                    <dd>
                        <input id="group_` + groupCount +`_name" name="group_` + groupCount +`_name" placeholder="Green Flower Zone" value="` + group.Name + `"/>
                    </dd>
                    <dt>
                        <label for="group_` + groupCount +`_write_names">Write Level Names</label>
                    </dt>
                    <dd>
                        <input id="group_` + groupCount +`_write_names" type="checkbox" name="group_` + groupCount +`_write_names" ` + checked_str +`/>
                    </dd>
                    <dt>
                        <label>Levels</label>
                    </dt>
                `
                
                for (let levelCount = 0; levelCount < group.Levels.length; levelCount++)
                {
                    let level = group.Levels[levelCount];
                    let Nights_checked_str = level.Nights ? "checked" : "";
                    let level_str = "level_" + groupCount + "_" + levelCount;
                    html_str += `
                    <div style="background: #408020; padding: 10px; margin-bottom: 10px">
                        <dt>
                            <label for="` + level_str + `_name">Level Name</label>
                        </dt>
                        <dd>
                            <input id="` + level_str + `_name" name="level_` + groupCount +`_` + levelCount +`_name" placeholder="Green Flower Zone" value="` + level.LevelName + `"/>
                        </dd>
                        <dt>
                            <label for="` + level_str + `_Act">Act</label>
                        </dt>
                        <dd>
                            <input type="number" id="` + level_str + `_Act" name="` + level_str + `_Act" placeholder="` +  (levelCount + 1) +`" value="` + level.Act + `"/>
                        </dd>
                        <dt>
                            <label for="` + level_str + `_number">Level Number</label>
                        </dt>
                        <dd>
                            <input type="number" id="` + level_str + `_number" name="` + level_str + `_number" placeholder="1" value="` + level.LevelNumber + `"/>
                        </dd>
                        <dt>
                            <label for="` + level_str + `_Nights">Nights</label>
                        </dt>
                        <dd>
                            <input id="` + level_str + `_Nights" type="checkbox" name="` + level_str + `_Nights" ` + Nights_checked_str +`/>
                        </dd>
                        <dt>
                            <label for="` + level_str + `_path">Picture</label>
                        </dt>
                        <dd>
                            <input id="` + level_str + `_path" name="` + level_str + `_path" placeholder="@FileManager.AssetsDirectoryName/images/mappics/MAP01P.png" value="` + level.IconUrl + `"/>
                        </dd>
                        <button type="button" onclick="remove_level(` + groupCount + `, ` + levelCount + `)">X</button>
                    </div>
                    `

                }
                        
                
                html_str += `
                    <button type="button" onclick="remove_group(` + groupCount + `)">X</button>
                    <button type="button" onclick="add_level(` + groupCount + `)">Add level</button>
                </div>
                `
            }
            formDiv.innerHTML = html_str;
        }
        
        read_fields()
        {
            for (let i = 0; i < this.LevelGroups.length; i++)    
            {
                this.LevelGroups[i].Levels = [];
            }
            this.LevelGroups = [];
            
            let groupCount = 0;
            while (document.getElementById("group_" + groupCount +"_name") != null)
            {
                let group_str = "group_" + groupCount;
                let GroupName = document.getElementById(group_str +"_name").value;
                let WriteNames = document.getElementById(group_str +"_write_names").checked ? "True" : "False";
                
                let levelCount = 0;
                
                let tempLevels = [];
                
                while (document.getElementById("level_" + groupCount + "_" + levelCount + "_name") != null)
                {
                    let level_str = "level_" + groupCount + "_" + levelCount;
                    let LevelName = document.getElementById(level_str +"_name").value;
                    let Act = document.getElementById(level_str +"_Act").value;
                    let LevelNumber = document.getElementById(level_str +"_number").value;
                    let Nights = document.getElementById(level_str +"_Nights").checked ? "True" : "False";
                    let IconUrl = document.getElementById(level_str +"_path").value;
                    let level = new LevelForm(LevelName, Act,  LevelNumber, Nights, IconUrl);
                    
                    levelCount++;
                    
                    console.log(level.LevelName + ", " + level.Act + ", " + level.LevelNumber + "," +level.Nights + ", " + level.IconUrl);
                    
                    tempLevels.push(level);
                }
                let group = new LevelGroupForm(GroupName, WriteNames, tempLevels);
                this.LevelGroups.push(group);
                groupCount++;
            }
        }
        
        constructor()
        {
            this.init();
            this.draw();
        }
    }
    
    let editGameForm;
    
    $( document ).ready(function() {
        console.log( "ready!" );
        editGameForm = new EditGameForm();
    });
    
    function read_fields()
    {
        editGameForm.read_fields();
    }
    
    function add_level(group_num)
    {
        editGameForm.read_fields();
        editGameForm.LevelGroups[group_num].Levels.push(new LevelForm("New Level", editGameForm.LevelGroups[group_num].Levels.length + 1, 0, false, ""));
        editGameForm.draw();
    }
    
    function remove_level(group_num, level_num)
    {
        editGameForm.read_fields();
        editGameForm.LevelGroups[group_num].Levels.splice(level_num, 1);
        editGameForm.draw();
    }
    
    function add_group()
    {
        editGameForm.read_fields();
        editGameForm.LevelGroups.push(new LevelGroupForm("New Group", "False", []))
        editGameForm.draw();
    }
    
    function remove_group(group_num)
    {
        editGameForm.read_fields();
        editGameForm.LevelGroups.splice(group_num, 1);
        editGameForm.draw();
    }
    function getToken() {
        return get("__AntiforgeryToken").value
    }
    
    function get(elementIdString) {
        return document.getElementById(elementIdString);
    }
    
    function save_changes()
    {
        read_fields();
        console.log("Saving...");
        $.ajax({
            type: 'POST',
            url: '?handler=Save',
            headers: {
                "RequestVerificationToken": getToken()
            },
            
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ 
                Name: get("game_name").value,
                UrlName: get("game_url_name").value,
                IconPath: get("game_icon_path").value,
                GroupsJson: JSON.stringify(editGameForm.LevelGroups),
            }),
            success: function (data) {
                console.log("Saving success!");
            },
            error: function (error) {
                console.log("Saving failure!");
            }
        });
    }
    </script>
}

<html>
<head>
    <title></title>
</head>
<body>
<div>
    <h1>Edit game</h1>
    <dl>
        <dt>
            <label for="game_name">Game's name</label>
        </dt>
        <dd>
            <input id="game_name" type="text" placeholder="Sonic Robo Blast 2 v2.2" value="@EditGame.Game.Name"/>
        </dd>
        <dt>
            <label for="game_url_name">Name in URL</label>
        </dt>
        <dd>
            <input id="game_url_name" type="text" placeholder="srb2v22" value="@EditGame.Game.UrlName"/>
        </dd>
        <dt>
            <label for="game_icon_path">Icon Path</label>
        </dt>
        <dd>
            <input id="game_icon_path" type="text" placeholder="path" value="@EditGame.Game.IconPath"/>
        </dd>
        <dt>
            <label for="group_div">Level groups:</label>
        </dt>
        
        <div id="group_div"></div>
    </dl>
    <button type="button" onclick="add_group()">Add level group</button>
    <input type="button" value="Cancel"/>
    <button onclick="save_changes()" >Submit</button>
</div>
<br/>
<br/>
<br/>
<br/>
</body>

<style>
    body {
        background: linear-gradient( rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0.75) ), url('@FileManager.AssetsDirectoryName/images/vanillabg.png');
        background-size: cover;
        background-repeat: no-repeat;
    }
</style>
</html>